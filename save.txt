solution <- function(a,theta,X0,sigma,ah = F,cn = F){
  #Declare variables for time as given in the question
  t1 = 0
  tT = 2
  #Set resolution of dt, we divide our total time into 100 intervals
  lens = 1000
  res = tT/lens
  #Set number of runs for the code
  iters = 10
  
  runs = 10000
  Xtar <- array(rep(0, iters*runs*3/100), c(iters, runs/100, 3))
  Xcov = matrix(0,runs,lens+4)
  cmat = matrix(0,lens+4,4)
  cmat[1:4,1:4] = 1
  for (itr in 1:iters){
    
    #Declare helper variables for use in capturing results from each simulation run
    Xtvec = integer(4)
    #Start of simulation
    
    for (k in 1:runs){
      
      #Anti-Hectic assignment, Use previously sampled random varibles for both speed
      #and variance reduction, here dW is our normal random variables corrected by sqrt(t)
      if(ah == F) dW <- rnorm(lens)*sqrt(res)
      else {
        if(k%%2 == 1)dW <- rnorm(lens)*sqrt(res)
        else dW <- -dW
      }
      
      #Matrix to store simulated data for this run
      3
      Xt = matrix(X0,1,3)
      #Start of run
      for (i in 1:lens){
        
        #Calculate drift for this time interval
        Xt <- Xt + (a*res*(theta-Xt))
        #Calculate variance term from random variable, Also calculate the f(x+h)
        #and f(x-h) simulations
        Xt[1] <- Xt[1] + sigma*sqrt(Xt[1])*dW[i]
        Xt[2] <- Xt[2] + 1.001*sigma*sqrt(Xt[2])*dW[i]
        Xt[3] <- Xt[3] + 0.999*sigma*sqrt(Xt[3])*dW[i]
        #if (cn == T ) Xt <- Xt - dW[i]
        #Xcov[i,2] = Xt[1]
      }
      #Assign Xt to our helper variables after the end of each run depending on the
      #solution required
      if(itr == 1& cn){
      Xcov[k,1] = Xt[1]
      Xcov[k, 2:4] = pmax(Xt[1:3]-100,integer(3))
      Xcov[k, 5:(lens+4)] = dW
      
      }
      
      Xtvec[1] = Xt[1] + Xtvec[1] - sum(dW*cmat[5:104,1]/res)
      Xtvec[2:4] = pmax(Xt[1:3]-100,integer(3)) + Xtvec[2:4] - c(sum(dW*cmat[5:104,2]/res),sum(dW*cmat[5:104,3]/res),sum(dW*cmat[5:104,4])/res) 
      if(k%%100 ==0 ){
        Xtdum = Xtvec/k
        Xtdum2 = (Xtdum[3]-Xtdum[4])/(2*0.001*sigma)
        Xtar[itr,k/100,] =  c(Xtdum[1:2],Xtdum2)
      }
    }
    if(itr ==1 & cn){
      cmat = var(Xcov)
      cmat = cmat[,1:4]
      
    }
    #Mean the output sum by dividing with number of runs
    Xtout = Xtvec/runs
    #Calculate the partial of Expectation w.r.t change in sigma
    Xtout2 = (Xtout[3]-Xtout[4])/(2*0.001*sigma)
    #Output the required result
    #return(c(Xtout[1:2],Xtout2))
    
    
  }
  return(Xtar)
}
#Xcov = solution(0.1,100,100,0.1,F,F)

#uncomment for sample run
Xtar1 = solution(0.1,100,100,0.1,F,F)
po = 100
var1 = matrix(0,po,3)
for (j in 1:po) for (i in 1:3) var1[j,i] = var(Xtar1[,j,i])

Xtar2 = solution(0.1,100,100,0.1,T,F)
var2 = matrix(0,po,3)
for (j in 1:po) for (i in 1:3) var2[j,i] = var(Xtar2[,j,i])

Xtar3 = solution(0.1,100,100,0.1,F,T)
var3 = matrix(0,po,3)
for (j in 1:po) for (i in 1:3) var3[j,i] = var(Xtar3[,j,i])

Xtar4 = solution(0.1,100,100,0.1,T,T)
var4 = matrix(0,po,3)
for (j in 1:po) for (i in 1:3) var4[j,i] = var(Xtar4[,j,i])

# mean1 = integer(3)
# for (i in 1:3) mean1[i] = mean(Xtar1[,i])
# mean2 = integer(3)
# for (i in 1:3) mean2[i] = mean(Xtar2[,i])
# mean3 = integer(3)
# for (i in 1:3) mean3[i] = mean(Xtar3[,i])
sp = 2
start =25
lim = 0.0004
plot(log10(100*seq(start,po)),var1[start:po,sp], ylim = c(0,lim),type = 'l', xlab = "log10(Number of runs)", ylab = "Variance", col = "red")
lines(log10(100*seq(start,po)),var2[start:po,sp], col = "green")
lines(log10(100*seq(start,po)),var3[start:po,sp], col = "blue")
lines(log10(100*seq(start,po)),var4[start:po,sp], col = "black")
legend(3.8,lim,legend = c("No modification", "Antihectic only", "Control only", "Combined"), col=c("red", "green","blue", "black"), lty = c(1,1,1,1))


